name: Deploy to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'frontend/**'
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'ca-central-1'

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy Infrastructure & Application
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-deploy
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Create terraform.tfvars
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          cat > terraform.tfvars << EOF
          aws_region   = "ca-central-1"
          project_name = "powerlifting-analytics-${ENV}"
          environment  = "${ENV}"
          
          # Database configuration
          db_master_username = "powerlifting_admin"
          db_master_password = "${{ secrets.DB_PASSWORD }}"
          db_instance_class  = "${{ ENV == 'prod' && 'db.t3.small' || 'db.t3.micro' }}"
          db_allocated_storage = ${{ ENV == 'prod' && '100' || '20' }}
          backup_retention_period = ${{ ENV == 'prod' && '7' || '0' }}
          create_read_replica = ${{ ENV == 'prod' && 'true' || 'false' }}
          
          # Lambda configuration
          lambda_memory_size = ${{ ENV == 'prod' && '1024' || '512' }}
          lambda_timeout     = 30
          
          # Network
          create_vpc = true
          
          # Monitoring
          enable_performance_insights = ${{ ENV == 'prod' && 'true' || 'false' }}
          EOF
      
      - name: Build Lambda packages
        run: |
          # Create API Lambda package
          zip -r api-function.zip ../api/lambda_function.py ../api/requirements.txt
          
          # Create Lambda layer (simplified version for CI)
          mkdir -p python/lib/python3.9/site-packages
          pip install psycopg2-binary==2.9.9 numpy==1.24.3 -t python/lib/python3.9/site-packages/
          zip -r lambda-layer-dependencies.zip python/
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        if: github.event.inputs.destroy != 'true'
        run: terraform apply -auto-approve tfplan
      
      - name: Get Infrastructure Outputs
        if: github.event.inputs.destroy != 'true'
        id: outputs
        run: |
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "bucket_name=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
      
      - name: Build Frontend
        if: github.event.inputs.destroy != 'true'
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
      
      - name: Deploy Frontend to S3
        if: github.event.inputs.destroy != 'true'
        run: |
          aws s3 sync ../frontend/dist/ s3://${{ steps.outputs.outputs.bucket_name }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ steps.outputs.outputs.cloudfront_id }} --paths "/*"
      
      - name: Terraform Destroy
        if: github.event.inputs.destroy == 'true'
        run: terraform destroy -auto-approve
      
      - name: Deployment Summary
        if: github.event.inputs.destroy != 'true'
        run: |
          echo "## ðŸš€ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Website URL:** ${{ steps.outputs.outputs.website_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**API URL:** ${{ steps.outputs.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ðŸ“Š Set up database schema and migrate data" >> $GITHUB_STEP_SUMMARY
          echo "2. ðŸ§ª Run integration tests" >> $GITHUB_STEP_SUMMARY
          echo "3. ðŸ“ˆ Monitor application health" >> $GITHUB_STEP_SUMMARY
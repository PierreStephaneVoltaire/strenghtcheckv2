name: Terraform Validation & Planning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'ca-central-1'

permissions:
  contents: read
  pull-requests: write
  id-token: write  # For OIDC authentication

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
      
      - name: Terraform Init
        run: terraform init -backend=false
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Run tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
      
      - name: Init TFLint
        run: tflint --init
      
      - name: Run TFLint
        run: tflint
      
      - name: Run Checkov (Security Scan)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
      
      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
        if: always()

  terraform-plan-dev:
    name: Terraform Plan (Development)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-terraform-plan
        if: secrets.AWS_ROLE_ARN != ''
      
      - name: Create terraform.tfvars for development
        run: |
          cat > terraform.tfvars << EOF
          aws_region   = "ca-central-1"
          project_name = "powerlifting-analytics-dev"
          environment  = "dev"
          
          # Database configuration - minimal for development
          db_master_username = "powerlifting_admin"
          db_master_password = "DevPassword123!"
          db_instance_class  = "db.t3.micro"
          db_allocated_storage = 20
          backup_retention_period = 0
          create_read_replica = false
          
          # Lambda configuration
          lambda_memory_size = 512
          lambda_timeout     = 30
          
          # Network - create new VPC
          create_vpc = true
          
          # Monitoring - disabled for cost
          enable_performance_insights = false
          EOF
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
        continue-on-error: true
      
      - name: Comment Plan on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan_output.txt', 'utf8');
            const maxLength = 65000;
            let truncatedPlan = plan;
            
            if (plan.length > maxLength) {
              truncatedPlan = plan.substring(0, maxLength) + "\n\n... (truncated)";
            }
            
            const output = `
            ## Terraform Plan Results üèóÔ∏è
            
            **Status**: ${{ steps.plan.outcome === 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`terraform
            ${truncatedPlan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform\`, Workflow: \`${{ github.workflow }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev
          path: |
            terraform/tfplan
            terraform/plan_output.txt
          retention-days: 5

  terraform-security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: terraform
          iac_dir: terraform/
          policy_type: aws
          only_warn: true
          sarif_upload: true
      
      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/
          format: sarif
          soft_fail: true
      
      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif
        if: always()

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      
      - name: Generate Infracost JSON
        run: |
          cd terraform
          infracost breakdown --path . --format json --out-file infracost.json
        continue-on-error: true
      
      - name: Post Infracost comment
        run: |
          cd terraform
          infracost comment github --path infracost.json \
            --repo $GITHUB_REPOSITORY \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --pull-request ${{ github.event.pull_request.number }}
        if: github.event_name == 'pull_request' && secrets.INFRACOST_API_KEY != ''
        continue-on-error: true

  quality-gate-terraform:
    name: Terraform Quality Gate
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: always()
    
    steps:
      - name: Check validation status
        run: |
          echo "Validation: ${{ needs.terraform-validate.result }}"
          echo "Security Scan: ${{ needs.terraform-security-scan.result }}"
          
          if [[ "${{ needs.terraform-validate.result }}" != "success" ]]; then
            echo "‚ùå Terraform validation failed"
            exit 1
          fi
          
          echo "‚úÖ Terraform quality gate passed"